<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fidibo Technical Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Fidibo Technical Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unlocking Multi-Threading in JavaScript with WebÂ Workers</title>
      <link>http://localhost:1313/posts/multi-threading-in-js/</link>
      <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/multi-threading-in-js/</guid>
      <description>Since the beginning of my journey in the realm of front-end development, I always thought that JavaScript was strictly single-threaded. The idea of developing multi-threaded applications seemed out of reach, mainly because I didn&amp;rsquo;t need it for the small calculations I was doing and thought more complex code would be too costly. I guess it wasn&amp;rsquo;t very popular back then, and many developers might have faced the same limitations.&#xA;I want to talk about web API services like service worker and web worker and useful libraries to enhance performance on web apps.</description>
    </item>
    <item>
      <title>Webpack Bundle Analyzer in React</title>
      <link>http://localhost:1313/posts/webpack-bundle-analyzer/</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/webpack-bundle-analyzer/</guid>
      <description>Definition: Webpack Bundle Analyzer is a tool used to visualize the contents of your Webpack bundle(s) to optimize the size and performance of your web application.&#xA;This analysis helps you identify which modules or assets are taking the most of the bundle size, allowing you to optimize your codebase. By understanding the dependencies and sizes of various modules, you can make informed decisions on code splitting, lazy loading, or removing unnecessary dependencies to improve load times and the application&amp;rsquo;s overall performance.</description>
    </item>
  </channel>
</rss>
